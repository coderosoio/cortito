// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/account/account.proto

/*
Package account is a generated protocol buffer package.

It is generated from these files:
	proto/account/account.proto

It has these top-level messages:
	UserRequest
	UserResponse
	UserExistResponse
	AuthRequest
	AuthResponse
	VerifyTokenRequest
	VerifyTokenResponse
	RevokeTokenRequest
	RevokeTokenResponse
*/
package account

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for User service

type UserService interface {
	CreateUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error)
	UpdateUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error)
	FindUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error)
	UserExists(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserExistResponse, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "account"
	}
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) CreateUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "User.CreateUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "User.UpdateUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) FindUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "User.FindUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UserExists(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserExistResponse, error) {
	req := c.c.NewRequest(c.name, "User.UserExists", in)
	out := new(UserExistResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserHandler interface {
	CreateUser(context.Context, *UserRequest, *UserResponse) error
	UpdateUser(context.Context, *UserRequest, *UserResponse) error
	FindUser(context.Context, *UserRequest, *UserResponse) error
	UserExists(context.Context, *UserRequest, *UserExistResponse) error
}

func RegisterUserHandler(s server.Server, hdlr UserHandler, opts ...server.HandlerOption) error {
	type user interface {
		CreateUser(ctx context.Context, in *UserRequest, out *UserResponse) error
		UpdateUser(ctx context.Context, in *UserRequest, out *UserResponse) error
		FindUser(ctx context.Context, in *UserRequest, out *UserResponse) error
		UserExists(ctx context.Context, in *UserRequest, out *UserExistResponse) error
	}
	type User struct {
		user
	}
	h := &userHandler{hdlr}
	return s.Handle(s.NewHandler(&User{h}, opts...))
}

type userHandler struct {
	UserHandler
}

func (h *userHandler) CreateUser(ctx context.Context, in *UserRequest, out *UserResponse) error {
	return h.UserHandler.CreateUser(ctx, in, out)
}

func (h *userHandler) UpdateUser(ctx context.Context, in *UserRequest, out *UserResponse) error {
	return h.UserHandler.UpdateUser(ctx, in, out)
}

func (h *userHandler) FindUser(ctx context.Context, in *UserRequest, out *UserResponse) error {
	return h.UserHandler.FindUser(ctx, in, out)
}

func (h *userHandler) UserExists(ctx context.Context, in *UserRequest, out *UserExistResponse) error {
	return h.UserHandler.UserExists(ctx, in, out)
}

// Client API for Auth service

type AuthService interface {
	CreateToken(ctx context.Context, in *AuthRequest, opts ...client.CallOption) (*AuthResponse, error)
	VerifyToken(ctx context.Context, in *VerifyTokenRequest, opts ...client.CallOption) (*VerifyTokenResponse, error)
	RevokeToken(ctx context.Context, in *RevokeTokenRequest, opts ...client.CallOption) (*RevokeTokenResponse, error)
}

type authService struct {
	c    client.Client
	name string
}

func NewAuthService(name string, c client.Client) AuthService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "account"
	}
	return &authService{
		c:    c,
		name: name,
	}
}

func (c *authService) CreateToken(ctx context.Context, in *AuthRequest, opts ...client.CallOption) (*AuthResponse, error) {
	req := c.c.NewRequest(c.name, "Auth.CreateToken", in)
	out := new(AuthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) VerifyToken(ctx context.Context, in *VerifyTokenRequest, opts ...client.CallOption) (*VerifyTokenResponse, error) {
	req := c.c.NewRequest(c.name, "Auth.VerifyToken", in)
	out := new(VerifyTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) RevokeToken(ctx context.Context, in *RevokeTokenRequest, opts ...client.CallOption) (*RevokeTokenResponse, error) {
	req := c.c.NewRequest(c.name, "Auth.RevokeToken", in)
	out := new(RevokeTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Auth service

type AuthHandler interface {
	CreateToken(context.Context, *AuthRequest, *AuthResponse) error
	VerifyToken(context.Context, *VerifyTokenRequest, *VerifyTokenResponse) error
	RevokeToken(context.Context, *RevokeTokenRequest, *RevokeTokenResponse) error
}

func RegisterAuthHandler(s server.Server, hdlr AuthHandler, opts ...server.HandlerOption) error {
	type auth interface {
		CreateToken(ctx context.Context, in *AuthRequest, out *AuthResponse) error
		VerifyToken(ctx context.Context, in *VerifyTokenRequest, out *VerifyTokenResponse) error
		RevokeToken(ctx context.Context, in *RevokeTokenRequest, out *RevokeTokenResponse) error
	}
	type Auth struct {
		auth
	}
	h := &authHandler{hdlr}
	return s.Handle(s.NewHandler(&Auth{h}, opts...))
}

type authHandler struct {
	AuthHandler
}

func (h *authHandler) CreateToken(ctx context.Context, in *AuthRequest, out *AuthResponse) error {
	return h.AuthHandler.CreateToken(ctx, in, out)
}

func (h *authHandler) VerifyToken(ctx context.Context, in *VerifyTokenRequest, out *VerifyTokenResponse) error {
	return h.AuthHandler.VerifyToken(ctx, in, out)
}

func (h *authHandler) RevokeToken(ctx context.Context, in *RevokeTokenRequest, out *RevokeTokenResponse) error {
	return h.AuthHandler.RevokeToken(ctx, in, out)
}
